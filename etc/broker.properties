#-------------------------------------------------------------------------------
# 日志配置
#-------------------------------------------------------------------------------

# 日志文件的路径。
# 注意：这里配置的是一个文件名称，不是目录名。文件可以不存在，但是文件所在的目录必须存在。
dep.framework.log.sink.s_file.path=../log/broker.log

# 开启日志文件达到一定大小后滚动(输出到新的文件)，默认开启
#dep.framework.log.sink.s_file.enableRollingBySize=1
# 触发日志滚动的文件大小，默认100M
#dep.framework.log.sink.s_file.rollingSize=104857600
# 日志滚动的最大文件数量，超过此数量，最老的日志将被删除。默认为10
#dep.framework.log.sink.s_file.rollingFileCount=10

# 定义Log通道s_file的类型，请勿随意改动
dep.framework.log.sink.s_file.type=FileSink

# 定义Log通道s_console的类型，请勿随意改动
dep.framework.log.sink.s_console.type=ConsoleSink

# 设置各级别日志存储的文件和类型
# 此处的s_file, s_console应与前面所有含有这些字符的配置相一致，请勿随意改动。
dep.framework.log.exception=s_file,s_console
dep.framework.log.error=s_file,s_console
dep.framework.log.warn=s_file,s_console
dep.framework.log.audit=s_file,s_console
dep.framework.log.info=s_file,s_console
dep.framework.log.debug=s_file,s_console
dep.framework.log.event=s_file,s_console

#-------------------------------------------------------------------------------
# 各级别日志的过滤模块
#-------------------------------------------------------------------------------
# dep.framework.log.exception.filterModule=
# dep.framework.log.error.filterModule=
# dep.framework.log.warn.filterModule=
# dep.framework.log.audit.filterModule=
# dep.framework.log.info.filterModule=
# dep.framework.log.debug.filterModule=
# dep.framework.log.event.filterModule=


#-------------------------------------------------------------------------------
# 主备相关配置
#-------------------------------------------------------------------------------
# 是否开启主备功能， 开启为1，否则为0.
# 如果不开启，则后面的主备配置无效。
broker.ft.tierEnable=0

# 主备分组名称，一个分组中含有一个主机和一个备机，他们的分组名必须相同。
# 级联和仲裁的机制，都使用此名称来识别主备分组。
broker.ft.tierName=BrokerID_1

# 定义主备服务的本机以及对方的IP和端口
broker.ft.connectionManager.listenIp= 
broker.ft.connectionManager.listenPort= 
broker.ft.connectionManager.remoteIp=
broker.ft.connectionManager.remotePort=


# 接收超时/登录超时的检查间隔(毫秒)
# 默认为1000
# broker.ft.connectionManager.checkTimeoutIntervalms=1000

# 主备连接接收数据超时时间(毫秒)， 超过此时间接收不到数据，会主动断开连接
# 默认5000
broker.ft.connectionManager.readTimeoutIntervalms=30000

# 连接主备服务后必须发起登录的超时时间(毫秒)， 超过此时间不进行主备功能登录，会主动断开连接
# 默认10000
# broker.ft.connectionManager.loginTimeoutms=10000

# 主备重连的最大运行时间片(毫秒)
# 默认500
# 此配置没有意义，因为主备之间就连接对方。运行时间的限制的原意是连接多个服务时，超过时间片下次再连接剩余服务。
# broker.ft.connectionManager.reconnectWindowms=500

# 主备重连的调度时间间隔(毫秒)
# 默认2000
# broker.ft.connectionManager.reconnectIntervalms=2000

# 主备服务间连接超时时间(毫秒)
# 默认3000
# 此值不宜设置过大，否则在对方连接不上时，会导致整个主备功能卡在连接等待上。
# broker.ft.connectionManager.connectionTimeoutIntervalms=3000

# 主机发送心跳广播的间隔(毫秒)
# 默认500
# broker.ft.heartbeatIntervalms=500

# broker发起主备选举前等待主机心跳广播的超时时间(毫秒)
# 此值应该大于心跳广播间隔
# 默认9000
broker.ft.heartbeatTimeoutms=35000

# broker发起主备选举后等待应选响应的时间
# 默认6000
# broker.ft.electionTimeoutms=6000

# 主备各定时维护功能时间间隔(毫秒)
# 默认为100
# broker.ft.recovery.sendingTimerIntervalms=100

# 使用定时器发送主备同步消息时，每次发送的消息数量上限。
# 此定时器即上面broker.ft.recovery.sendingTimerIntervalms配置时间间隔的定时器
# 默认为20000
# broker.ft.recovery.sendingCountPerInterval=2000

# 使用定时器发送主备同步消息时，单个队列每次发送的消息数量上限。
# 此定时器即上面broker.ft.recovery.sendingTimerIntervalms配置时间间隔的定时器
# 默认为20000
# broker.ft.recovery.sendingCountPerAddress=2000

#-------------------------------------------------------------------------------
# 仲裁相关配置
#-------------------------------------------------------------------------------
# 是否开启仲裁功能， 开启为1，否则为0.
# 如果不开启，则后面的仲裁配置无效。
broker.ft.arbitrator.enable=0

# 配置各仲裁服务的IP和端口
broker.ft.arbitrator.server.1=

# 仲裁功能动态库名称，必须配置， 且存在该名称的合法动态库
broker.ft.arbitrator.library=../lib/libarbitrator.so

# 仲裁策略模式，必须配置。取值可以为：
# PortChecker
# AlwaysTrue
# AlwaysFalse
# LaterTrue
# ARBServerChecker
broker.ft.arbitrator.strategy=ARBServerChecker

# 仲裁服务的连接超时时间(毫秒)，默认1000
# broker.ft.arbitrator.connectionTimeoutMS=1000

# 仲裁和broker之间的心跳超时时间(毫秒)，默认10000
# broker.ft.arbitrator.HBtimeoutMS=10000

# 发起仲裁请求后，Broker接收各仲裁裁决的超时时间(毫秒)，默认500
# 此时间的粒度为10毫秒，个位数没有意义。
# broker.ft.arbitrator.timeoutMS=500


#-------------------------------------------------------------------------------
# Broker Configuration
#-------------------------------------------------------------------------------
# 定义消息服务的IP和端口
# 消息服务提供了消息队列的创建、生产和消费订阅等功能，为Broker的基础服务。
# 其中IP地址为侦听服务绑定的本地地址，必须为本机的IP地址之一。也可以用0.0.0.0绑定本机所有的IP地址。
# 其他所有涉及本机服务IP，配置方法均和此处相同。
broker.tcpServer.interface=0.0.0.0
broker.tcpServer.port=28766

# 会话存储的路径, 该路径必须是已经创建好的路径。否则程序会异常退出。
# 该配置必须存在，否则程序会异常退出。
broker.sessionStore.directory=../sessionStore
# 会话存储模式 - 0=DAY, 1=HOUR, 2=MINUTE
broker.session.mode=0
# 会话存储中使用的有效会话数
broker.session.validSize=2
# 会话存储的最大数据文件大小
broker.sessionStore.maxFileSize=8g
# 内存持久化的默认内存大小
broker.sessionStore.defaultMemorySize=10m
# 内存持久化最大内存大小
broker.sessionStore.maxMemorySize=10m
# 是否使用内存持久化功能: 0不适用，1使用
broker.sessionStore.memoryEnable=0
# 会话存储的文件流的缓存大小
broker.sessionStore.cacheSize=1000000
# 会话存储的磁盘刷新模式（1=同步，0=异步）
broker.sessionStore.syncMode=0

# broker服务线程数量，推荐配置为机器线程数-5
# 默认为4， 不能大于100
broker.tcpServer.selector.count=50

# broker服务线程数量(专门用于消息分发)
# 默认为4， 不能大于100
broker.dirtyNotify.selector.count=4


# broker 消息服务的客户端连接，设置keepAlive参数, 时间单位秒
# 含义：idleTime秒无数据发送，则开始连接探测，发送probesCnt次keepAlive报文，间隔interval秒
#       如果都收不到回应，则向应用报连接断开。
# 默认：不设置，idleTime=3600, interval=60, probesCnt=9
broker.tcpKeepAlive.enable=1
broker.tcpKeepAlive.idleTime=30
broker.tcpKeepAlive.interval=10
broker.tcpKeepAlive.probesCnt=3

# Broker最大客户端数量， 默认为0， 表示不限制
# broker.tcpServer.max.client.count=500

# 消息匹配分发时每次的最大数量
# 默认值为100
# broker.limit.matchingQueue=100

# 当消息分派窗口中可用的达到百分比时，消息将再次分派给客户端的最小比例(1-100)标识1%-100%
# 必须为1~100，默认50
# broker.queue.resumeMsgDispatchPercent=50

# 统计输出的时间间隔，默认为5000
# broker.statistic.outputIntervalms=5000
# 统计输出文件，实际上用不到。
#broker.statistic.outputFile=../log/stat.log

# Queue或topic可创建的最大数量
broker.maximum.destination=5000

#-------------------------------------------------------------------------------
# 监控服务相关配置
#-------------------------------------------------------------------------------

# 定义监控服务的IP和端口
broker.monitor.interface=0.0.0.0
broker.monitor.port=28767

# 向监控报告Broker状况间隔，单位Ms
broker.monitor.reportIntervalms=5000

# 向监控发送心跳间隔，单位Ms
broker.monitor.heartbeatIntervalms=5000

# 与监控心跳超时时间，单位Ms
broker.monitor.hearbeatTimeout=10000

# 最大监控连接数
broker.monitor.max.client.count=2

#监控用户权限配置文件路径
broker.authenticationServer.monitorAccountRepository.file=../etc/monitorAccounts.profile

#-------------------------------------------------------------------------------
# 级联相关配置
#-------------------------------------------------------------------------------
# 定义级联功能的服务IP和端口
# 将下面的注释打开，开启级联功能。
# broker.cluster.listenIP=0.0.0.0
# broker.cluster.listenPort=29766

# 所有的级联服务器列表, 每组主备服务器使用()包含。
# 每个主备服务器为：tierName,address-1,address-2，服务地址的顺序与主备身份无关。
# 这个列表中可以包含自身的服务器， 名称与本服务tierName相同的主备组会被忽略掉。
# 将下面的注释打开，开启级联功能。
# broker.cluster.remoteList=(BrokerID_LMQ,)(BrokerID_LMQ_wai,)

#级联单次远程连接窗口时间
broker.cluster.connectionManager.reconnectWindowms=500
#连接超时时间
broker.cluster.connectionManager.connectionTimeoutIntervalms=3000
#TCP读超时
broker.cluster.readTimeout=15000
#TCP读超时检测频率
broker.cluster.connectionManager.checkTimeoutIntervalms=1000
#请求连接响应超时
broker.cluster.loginTimeout=10000
#尝试连接间隔
broker.cluster.retryConnectInterval=1000
#心跳超时时间
broker.cluster.heartbeatTimeout=15000
#心跳检测间隔
broker.cluster.heartbeatInterval=5000
#单次最大读取tcp数据大小
broker.cluster.connection.readSize=102400

#Broker间TOPIC订阅acwindowsize
broker.cluster.topicSubscribeAckWindowsSize=255
#nodurable订阅，等待TOPIC消息同步的最长时间
broker.cluster.waitTopicSynchronizems=30000

#是否允许匿名登录
broker.authenticationServer.isAnonymityLogin=1
#用户信息配置文件
broker.authenticationServer.accountRepository.file=../etc/accounts.profile
broker.authenticationServer.encryption.library=libcfmqcrypto.so
broker.authenticationServer.encryption.key=IibNqdHvtx47b7slRgowxA==


#-------------------------------------------------------------------------------
# HTTPSERVER相关配置
#-------------------------------------------------------------------------------
# 是否开启HttpServer， 开启为1，否则为0.
# 如果不开启，则后面的配置无效。
broker.httpserver.enable=1
#httpserver监听地址
broker.httpserver.interface=0.0.0.0
#httpserver监听端口
broker.httpserver.port=8888
#httpserver网络线程数量，根据机器性能配置，性能优的机器可以配置多一点
broker.httpserver.threadNum=3
#http token生命时长，默认为2小时，每次续期会自动往后延续该数量，单位为秒
broker.httpserver.sessionExpiredSec=7200
#http请求超时时间，默认为10秒，单位为毫秒
broker.httpserver.requestTimeoutMs=10000
#http请求可以处理的最大包大小，默认为110M，单位为字节
broker.httpserver.maxPackageSizeBytes=115343360‬
#http会话检测会话是否过期的时间间隔，单位为毫秒，默认为30000毫秒
broker.httpserver.checkExpiredIntervalMs=30000
#http推送模式下默认ackWindowSize
broker.httpserver.defaultAckWindowSize=5
#http推送模式下最大ackWindowSize
broker.httpserver.maxAckWindowSize=20
#http推送消息失败的重试间隔
broker.httpserver.pushIntervalMs=5000
#http响应是否使用gzip压缩
broker.httpserver.useGzipOnResponse=1
#http推送是否使用gzip压缩
broker.httpserver.useGzipOnPush=1
#http监控服务是否开启，开启为1，否则为0，不配置则默认不开启
broker.httpmonitorserver.enable=1
#http监控服务监听地址
broker.httpmonitorserver.interface=0.0.0.0
#httpserver监控服务监听端口
broker.httpmonitorserver.port=12345
